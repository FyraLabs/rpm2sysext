#!/bin/bash
# This script converts an RPM file to a systemd sysext extension.

# What this script will do:
# 1. Get the package name from the RPM file
# 2. Get the distro name and version from /etc/os-release
# 3. Create a directory structure for the systemd sysext extension
# 4. Extract the RPM file contents into that directory structure
# 5. Create a systemd-sysext manifest for the extension
# 6. Finally, create a squashfs image of the extension to be used with systemd-sysext
# 
# The script will output the name of the squashfs image created.
ARGS=$@
: ${CLEAN_BUILD_ID:=1} # Clean up build-id directory by default

# Arguments are the RPM file(s) to convert


RPM_FILE=$(realpath $1)

function usage {
    echo "Usage: $0 <RPM_FILES> ..."
    exit 1
}

if [ -z "$RPM_FILE" ]; then
    usage
fi

# returns array of absolute paths to RPM files
function find_rpms {
    local rpms=()
    for arg in $ARGS; do
        if [ -f "$arg" ]; then
            rpms+=($(realpath $arg))
        else
            echo "File $arg does not exist"
            usage
        fi
    done
    echo ${rpms[@]}
}

RPM_FILES=$(find_rpms)

# Get package name from first RPM only
PACKAGE_NAME=$(rpm -qp --queryformat "%{NAME}" $RPM_FILE | head -n 1)

# PACKAGE_NAME=$(rpm -qp --queryformat "%{NAME}" $RPM_FILE)

# Declare a sysext name I guess
: ${SYSEXT_NAME:=$PACKAGE_NAME}

# Import /etc/os-release to get distro data

source /etc/os-release

# Create the directory structure for the systemd sysext extension, we should delete them already exists
# 
function mkdir_delete_if_exists {
    if [ -d "$1" ]; then
        rm -rf $1
    fi
    mkdir -p $1
}

SYSEXT_DIR="${PWD}/${SYSEXT_NAME}"
SYSEXT_OUTPUT="${PWD}/${SYSEXT_NAME}.raw"

function cleanup {
    rm -rf $SYSEXT_DIR
    rm -f $SYSEXT_OUTPUT
}
# extract RPM to current directory
# path to RPM is the argument
# function extract_rpm {
#     local rpm_file=$1
#     rpm2cpio $rpm_file | cpio -idmv
#     # Now, clean up usr/lib/.build-id if flag is set
#     # echo "CLEAN_BUILD_ID: $CLEAN_BUILD_ID"
#     if [ "$CLEAN_BUILD_ID" -eq 1 ]; then
#         rm -rfv usr/lib/.build-id
#     fi
# }
# 
function extract_rpms {
    for rpm_file in $RPM_FILES; do
        echo "Extracting $rpm_file"
        rpm2cpio $rpm_file | cpio -idm
        # Now, clean up usr/lib/.build-id if flag is set
        # echo "CLEAN_BUILD_ID: $CLEAN_BUILD_ID"
    done
    if [ "$CLEAN_BUILD_ID" -eq 1 ]; then
        rm -rf usr/lib/.build-id
    fi
}

extension_release="""ID=$ID
VERSION_ID=$VERSION_ID
"""

function install_manifest {
    mkdir -p usr/lib/extension-release.d
    echo "$extension_release" > usr/lib/extension-release.d/extension-release.$SYSEXT_NAME
}

MKSQUASHFS_ARGS="-noappend -quiet -comp zstd"

function main {
    mkdir_delete_if_exists $SYSEXT_DIR
    pushd $SYSEXT_DIR
    extract_rpms
    install_manifest
    popd
    mksquashfs $SYSEXT_DIR $SYSEXT_OUTPUT $MKSQUASHFS_ARGS 
    echo $SYSEXT_OUTPUT
}


main